import React, { useState, useEffect, useCallback } from 'react';
import  useSlot  from '../../../Hooks/useSlot';
import { useAppointment } from '../../../Hooks/useAppoinment';
import useAuth from '../../../Hooks/useAuth';
import useService from '../../../Hooks/useService';
import { format, addDays, differenceInDays, startOfWeek, endOfWeek } from 'date-fns';
import { DateRange } from 'react-date-range';
import { FaUser, FaEnvelope, FaPhone, FaMapMarkerAlt, FaCalendarAlt, FaClock, FaHome, FaHospital, FaFlask, FaTimes, FaGoogle, FaExclamationTriangle } from 'react-icons/fa';
import { Alert } from 'antd';
import GoogleMapPicker from '../../../utils/GoogleMapsUtil.jsx';
import { useNavigate } from 'react-router-dom';
import './Appoinment.css';
import 'react-date-range/dist/styles.css';
import 'react-date-range/dist/theme/default.css';
import { toast } from 'react-toastify';

const AppointmentModal = ({ isOpen, onClose, serviceId, serviceName, serviceType }) => {
  const [selectedSlot, setSelectedSlot] = useState('');
  const [collection_address, setAddress] = useState('');
  const [type, setType] = useState('');
  const [availableSlots, setAvailableSlots] = useState([]);
  const [showGoogleMap, setShowGoogleMap] = useState(false);
  const [mapAddress, setMapAddress] = useState('');
  const [isOutsideBusinessHours, setIsOutsideBusinessHours] = useState(false);
  const [addressValidation, setAddressValidation] = useState({ isValid: true, message: '' });
  
  // Search and pagination states
  const [currentPage, setCurrentPage] = useState(1);
  const [keyword, setKeyword] = useState('');
  
  const { fetchAvailableSlots } = useSlot();
  const { createAppointment } = useAppointment();
  const { user } = useAuth();
  const { searchListService } = useService();
  const navigate = useNavigate();
  const [range, setRange] = useState([
    {
      startDate: null,
      endDate: null,
      key: 'selection'
    }
  ]);
  // Validation functions
  const validateHCMCAddress = (address) => {
    const hcmcKeywords = ['h·ªì ch√≠ minh', 'tp hcm', 'th√†nh ph·ªë h·ªì ch√≠ minh', 'ho chi minh', 'hcmc', 's√†i g√≤n', 'saigon'];
    const normalizedAddress = address.toLowerCase().trim();
    return hcmcKeywords.some(keyword => normalizedAddress.includes(keyword));
  };

  const checkBusinessHoursAndDay = (slot) => {
    if (!slot?.time_slots?.[0]) return false;
    const timeSlot = slot.time_slots[0];
    const startHour = timeSlot.start_time?.hour;
    const endHour = timeSlot.end_time?.hour;
    // Create date object and get day of week (0=Sunday, 6=Saturday)
    const slotDate = new Date(timeSlot.year, timeSlot.month - 1, timeSlot.day);
    const dayOfWeek = slotDate.getDay();
    // Check if the slot is on a weekend (Saturday or Sunday)
    if (dayOfWeek === 6 || dayOfWeek === 0) return true; // Saturday or Sunday
    // Check business hours: 8:00 - 17:00 (8 AM - 5 PM)
    return startHour < 8 || startHour >= 17 || endHour < 8 || endHour > 17;
  };

  const isSlotSelectableForHome = (slot) => {
    if (!slot?.time_slots?.[0]) return false;
    
    const timeSlot = slot.time_slots[0];
    const slotDate = new Date(timeSlot.year, timeSlot.month - 1, timeSlot.day);
    const dayOfWeek = slotDate.getDay(); // 0=Sunday, 6=Saturday
    const startHour = timeSlot.start_time?.hour;
    const endHour = timeSlot.end_time?.hour;
    
    // Debug logging for this specific function
    console.log(`üîç isSlotSelectableForHome check:`, {
      date: `${timeSlot.day}/${timeSlot.month}/${timeSlot.year}`,
      dayOfWeek,
      dayName: ['Ch·ªß nh·∫≠t', 'Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7'][dayOfWeek],
      startHour,
      endHour,
      isWeekend: dayOfWeek === 6 || dayOfWeek === 0,
      isCompletelyOutsideBusinessHours: (endHour <= 8) || (startHour >= 17)
    });
    
    // For home service: 
    // - Weekends (Saturday=6, Sunday=0): Allow all time slots
    // - Weekdays (Monday-Friday): Only allow slots that are COMPLETELY outside business hours
    const isWeekend = dayOfWeek === 6 || dayOfWeek === 0;
    
    if (isWeekend) {
      console.log(`‚úÖ Weekend (${dayOfWeek === 6 ? 'Th·ª© 7' : 'Ch·ªß nh·∫≠t'}) - slot allowed for home service`);
      return true; // Allow any time slot on weekends
    }
    
    // For weekdays, the ENTIRE slot must be outside business hours (8:00-17:00)
    // Either: slot ends before 8:00 AM, OR slot starts at/after 17:00 (5:00 PM)
    const isCompletelyOutsideBusinessHours = (endHour <= 8) || (startHour >= 17);
    const result = isCompletelyOutsideBusinessHours;
    
    console.log(`${result ? '‚úÖ' : '‚ùå'} Weekday (${['Ch·ªß nh·∫≠t', 'Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7'][dayOfWeek]}) - slot ${result ? 'ALLOWED' : 'NOT ALLOWED'} for home service`);
    console.log(`   - Time: ${startHour}:00 - ${endHour}:00, Completely outside business hours: ${isCompletelyOutsideBusinessHours}`);
    console.log(`   - Logic: (endHour <= 8: ${endHour <= 8}) OR (startHour >= 17: ${startHour >= 17})`);
    
    return result;
  };

  const isSlotPastDate = (slot) => {
    if (!slot?.time_slots?.[0]) return true;
    const timeSlot = slot.time_slots[0];
    const now = new Date();
    
    // Use actual date components, not day of week
    const slotDate = new Date(timeSlot.year, timeSlot.month - 1, timeSlot.day, timeSlot.start_time.hour, timeSlot.start_time.minute);
    
    // For debugging - log the comparison
    console.log('Current time:', now);
    console.log('Slot date:', slotDate);
    console.log('Is past?', slotDate < now);
    
    // Only consider it past if the slot time has already ended (not just started)
    // Add a 30-minute buffer to allow booking slots that are about to start
    const bufferTime = 30 * 60 * 1000; // 30 minutes in milliseconds
    return slotDate.getTime() + bufferTime < now.getTime();
  };

  // Helper function to check if slot is today
  const isSlotToday = (slot) => {
    if (!slot?.time_slots?.[0]) return false;
    const timeSlot = slot.time_slots[0];
    const now = new Date();
    const slotDate = new Date(timeSlot.year, timeSlot.month - 1, timeSlot.day);
    
    return (
      now.getFullYear() === slotDate.getFullYear() &&
      now.getMonth() === slotDate.getMonth() &&
      now.getDate() === slotDate.getDate()
    );
  };

  
  useEffect(() => {
    const getSlots = async () => {
      if ((type === 'facility' || type === 'self' || type === 'home') && range[0].startDate && range[0].endDate) {
        const startDate = format(range[0].startDate, 'yyyy-MM-dd');
        const endDate = format(range[0].endDate, 'yyyy-MM-dd');
        const result = await fetchAvailableSlots({
          start_date: startDate,
          end_date: endDate
        });
        if (result.success && result.data?.data?.pageData) {
          const slots = result.data.data.pageData;
          setAvailableSlots(slots);
        }
      }
    };
    getSlots();
  }, [range, type]);

  useEffect(() => {
    if (serviceType === 'administrative' || serviceType === 'civil') {
      setType('facility');
    } else {
      setType('');
    }
  }, [serviceType, isOpen]);

  // Validate address for home collection
  useEffect(() => {
    if (type === 'home' && (collection_address || mapAddress)) {
      const addressToCheck = mapAddress || collection_address;
      if (addressToCheck.trim()) {
        const isValid = validateHCMCAddress(addressToCheck);
        setAddressValidation({
          isValid,
          message: isValid ? '' : 'Thu m·∫´u t·∫°i nh√† ch·ªâ ƒë∆∞·ª£c ph√©p trong khu v·ª±c TP. H·ªì Ch√≠ Minh'
        });
      }
    } else {
      setAddressValidation({ isValid: true, message: '' });
    }
  }, [type, collection_address, mapAddress]);

  // Check business hours for selected slot
  useEffect(() => {
    if (selectedSlot) {
      const slot = availableSlots.find(s => s._id === selectedSlot);
      // If slot is found, check business hours and day
      if (slot) {
        setIsOutsideBusinessHours(checkBusinessHoursAndDay(slot));
      }
    } else {
      setIsOutsideBusinessHours(false);
    }
  }, [selectedSlot, availableSlots]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    const token = localStorage.getItem('accessToken');
    if (!token) {
      toast.warning('B·∫°n ph·∫£i ƒëƒÉng nh·∫≠p m·ªõi ƒë·∫∑t l·ªãch ƒë∆∞·ª£c. Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y.');
      return;
    }

    // Validate home collection address
    if (type === 'home' && !addressValidation.isValid) {
      toast.error(addressValidation.message);
      return;
    }

    // Validate required fields
    if ((type === 'facility' || type === 'self' || type === 'home') && !selectedSlot) {
      toast.error('Vui l√≤ng ch·ªçn khung gi·ªù kh√°m');
      return;
    }

    // Check if selected slot is in the past for all appointment types
    if (selectedSlot) {
      const selectedSlotData = availableSlots.find(s => s._id === selectedSlot);
      if (selectedSlotData) {
        if (isSlotPastDate(selectedSlotData)) {
          toast.error('Kh√¥ng th·ªÉ ƒë·∫∑t l·ªãch cho khung gi·ªù ƒë√£ qua');
          return;
        }
        
        // Additional validation for home service
        if (type === 'home' && !isSlotSelectableForHome(selectedSlotData)) {
          toast.error('D·ªãch v·ª• t·∫°i nh√†: Cu·ªëi tu·∫ßn c√≥ th·ªÉ ch·ªçn b·∫•t k·ª≥ gi·ªù n√†o, ng√†y th∆∞·ªùng ch·ªâ ngo√†i gi·ªù h√†nh ch√≠nh');
          return;
        }
      }
    }

    if (type === 'home' && !(collection_address || mapAddress)) {
      toast.error('Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ chi ti·∫øt cho vi·ªác thu m·∫´u t·∫°i nh√†');
      return;
    }
    
    try {
      const response = await createAppointment({
        service_id: serviceId,
        ...((type === 'facility' || type === 'self' || type === 'home') && selectedSlot && { slot_id: selectedSlot }),
        type: type,
        collection_address: type === 'home' ? (mapAddress || collection_address) : null
      });

      // Check for success response structure: {"success": true, "data": []}
      if (response && response.success === true) {
        toast.success('ƒê·∫∑t l·ªãch kh√°m th√†nh c√¥ng!');
        
        // Get appointment ID from response
        const appointmentId = response.data?._id || response.data?.data?._id;
        
        if (appointmentId) {
          // Navigate to payment page with appointment ID
          navigate('/payment', { 
            state: { 
              appointmentId: appointmentId,
              isFirstPayment: true // Flag to indicate this is the first payment (deposit)
            } 
          });
        }
        
        onClose();
      } else {
        // Handle error response structure: {"success": false, "message"} or {"message"}
        let errorMessage = '';
        if (response && response.message) {
          errorMessage = response.message;
        } else if (response && response.success === false && response.message) {
          errorMessage = response.message;
        } else {
          errorMessage = 'C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i!';
        }
        toast.error(errorMessage);
      }
    } catch (error) {
      console.error('Error creating appointment:', error);
      toast.error(error?.message || 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  };

  // Search functions with default values and logic
  const handleSearchService = useCallback(
    (searchPayload = {}) => {
      // Default values for pageNum and pageSize
      const payload = {
        pageNum: 1,
        pageSize: 10,
        // Add filter for services with parent_service_id only
        has_parent: true,
        ...searchPayload
      };
      
      // Update local state
      setCurrentPage(payload.pageNum);
      if (payload.keyword !== undefined) {
        setKeyword(payload.keyword);
      }
      
      searchListService(payload);
    },
    [searchListService]
  );

  // Helper function for search with pagination
  const handleSearch = useCallback(
    (searchKeyword = '') => {
      setKeyword(searchKeyword);
      setCurrentPage(1);
      handleSearchService({
        pageNum: 1,
        pageSize: 10,
        keyword: searchKeyword,
        has_parent: true
      });
    },
    [handleSearchService]
  );

  // Helper function for page change
  const handlePageChange = useCallback(
    (page) => {
      if (page >= 1) {
        setCurrentPage(page);
        handleSearchService({
          pageNum: page,
          pageSize: 10,
          keyword,
          has_parent: true
        });
      }
    },
    [handleSearchService, keyword]
  );

  if (!isOpen) return null;

  const handleRangeChange = (item) => {
    const picked = item.selection.startDate;
    const weekStart = startOfWeek(picked, { weekStartsOn: 1 });
    const weekEnd = endOfWeek(picked, { weekStartsOn: 1 });
    setRange([{ startDate: weekStart, endDate: weekEnd, key: 'selection' }]);
  };

  const handleGoogleMapSelect = (selectedAddress) => {
    setMapAddress(selectedAddress);
    setAddress(selectedAddress);
    setShowGoogleMap(false);
  };

  return (
    <div className=" appointment-modal fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg shadow-2xl max-w-4xl w-full max-h-[95vh] overflow-y-auto">
        {/* Header */}
        <div className="bg-[#1caf9a] px-6 py-4 text-white relative rounded-t-lg">
          <button 
            onClick={onClose}
            className="absolute top-4 right-4 p-2 hover:bg-white/20 rounded-full transition-colors"
          >
            <FaTimes className="w-5 h-5" />
          </button>
          <h2 className="text-xl font-bold">ƒê·∫∑t l·ªãch kh√°m</h2>
          <p className="text-sm opacity-90">{serviceName}</p>
        </div>

        {/* Form Content */}
        <form onSubmit={handleSubmit} className="max-w-4xl mx-auto font-arial border border-gray-300 px-5 py-5 rounded-b-lg bg-white text-gray-800 text-sm leading-snug">
          
          {/* Section 1: N·ªôi dung chi ti·∫øt ƒë·∫∑t h·∫πn */}
          <div className="font-bold text-lg border-b-2 border-[#1caf9a] pb-1 mb-5 text-[#1caf9a]">
            N·ªôi dung chi ti·∫øt ƒë·∫∑t h·∫πn
          </div>
          
          <div className="flex gap-5 mb-4 flex-wrap">

            <div className="flex-1 min-w-[300px] flex flex-col">
              <label className="font-semibold mb-1.5 text-[#1caf9a]">
                D·ªãch v·ª• <span className="text-red-500">*</span>
              </label>
              <select 
                required 
                defaultValue="facility"
                className="border border-gray-300 rounded px-2.5 py-2 text-sm text-gray-800 outline-[#1caf9a] h-9"
              >
                <option value="facility">
                  {serviceType === 'civil' ? 'D√¢n S·ª±' : 'Kh√¥ng c√≥ d·ªãch v·ª•'}
                </option>
              </select>
            </div>

            <div className="flex-1 min-w-[300px] flex flex-col">
              <label className="font-semibold mb-1.5 text-[#1caf9a]">T√™n d·ªãch v·ª•</label>
              <select 
                defaultValue="serviceName"
                className="border border-gray-300 rounded px-2.5 py-2 text-sm text-gray-800 outline-[#1caf9a] h-9"
              >
                <option value="serviceName">{serviceName}</option>
              </select>
            </div>
          </div>

          {/* Section 2: Ph∆∞∆°ng th·ª©c l·∫•y m·∫´u */}
          <div className="font-bold text-lg border-b-2 border-[#1caf9a] pb-1 mb-5 text-[#1caf9a]">
            Ph∆∞∆°ng th·ª©c l·∫•y m·∫´u
          </div>

          <div className="flex gap-5 mb-4 flex-wrap">
            <div className="flex-1 min-w-[300px] flex flex-col">
              <label className="font-semibold mb-1.5 text-[#1caf9a]">
                ƒê·ªãa ch·ªâ l·∫•y m·∫´u <span className="text-red-500">*</span>
              </label>
              <div className="flex items-center gap-4 mb-2">
                <label className="flex items-center gap-1 cursor-pointer select-none">
                  <input
                    type="radio"
                    name="collection_method"
                    value="facility"
                    checked={type === 'facility'}
                    onChange={(e) => setType(e.target.value)}
                    className="w-4 h-4"
                  />
                  <span className="text-sm">C∆° s·ªü x√©t nghi·ªám</span>
                </label>
                {serviceType === 'civil' && (
                  <>
                    <label className="flex items-center gap-1 cursor-pointer select-none">
                      <input
                        type="radio"
                        name="collection_method"
                        value="home"
                        checked={type === 'home'}
                        onChange={(e) => setType(e.target.value)}
                        className="w-4 h-4"
                      />
                      <span className="text-sm">T·∫°i nh√†</span>
                    </label>
                    <label className="flex items-center gap-1 cursor-pointer select-none">
                      <input
                        type="radio"
                        name="collection_method"
                        value="self"
                        checked={type === 'self'}
                        onChange={(e) => setType(e.target.value)}
                        className="w-4 h-4"
                      />
                      <span className="text-sm">T·ª± l·∫•y m·∫´u</span>
                    </label>
                  </>
                )}
              </div>
            </div>
          </div>

          {/* Address Input for Home Collection */}
          {type === 'home' && (
            <div className="flex gap-5 mb-4 flex-wrap">
              <div className="flex-1 min-w-[300px] flex flex-col">
                <label className="font-semibold mb-1.5 text-[#1caf9a]">
                  ƒê·ªãa ch·ªâ chi ti·∫øt <span className="text-red-500">*</span>
                </label>
                <div className="flex gap-2">
                  <input
                    type="text"
                    value={collection_address}
                    onChange={(e) => setAddress(e.target.value)}
                    className="flex-1 border border-gray-300 rounded px-2.5 py-2 text-sm text-gray-800 outline-[#1caf9a]"
                    placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ chi ti·∫øt..."
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowGoogleMap(true)}
                    className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors text-sm flex items-center gap-2"
                  >
                    <FaGoogle className="w-3 h-3" />
                    Maps
                  </button>
                </div>
                {!addressValidation.isValid && (
                  <Alert
                    message={addressValidation.message}
                    type="error"
                    showIcon
                    className="mt-2"
                    icon={<FaExclamationTriangle />}
                  />
                )}
                {mapAddress && (
                  <div className="mt-2 p-2 bg-gray-50 rounded border">
                    <p className="text-xs text-gray-600">ƒê·ªãa ch·ªâ t·ª´ Google Maps:</p>
                    <p className="text-sm font-medium">{mapAddress}</p>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Date Selection for Facility and Self */}
          {(type === 'facility' || type === 'self' || type === 'home') && (
            <>
              <div className="flex gap-5 mb-4 flex-wrap">
                <div className="flex-1 min-w-[300px] flex flex-col">
                  <label className="font-semibold mb-1.5 text-[#1caf9a]">Ch·ªçn kho·∫£ng ng√†y</label>
                  <div className="border border-gray-300 rounded overflow-hidden">
                    <DateRange
                      editableDateInputs={false}
                      onChange={handleRangeChange}
                      moveRangeOnFirstSelection={false}
                      ranges={range}
                      minDate={new Date()}
                      showDateDisplay={false}
                      rangeColors={['#1caf9a']}
                      showMonthAndYearPickers={true}
                      showPreview={false}
                      months={1}
                      direction="horizontal"
                    />
                  </div>
                  {range[0].startDate && range[0].endDate && (
                    <div className="mt-2 p-2 bg-[#1caf9a]/10 rounded border border-[#1caf9a]/20">
                      <p className="text-sm font-medium text-[#1caf9a]">
                        Tu·∫ßn ƒë√£ ch·ªçn: {format(range[0].startDate, 'dd/MM/yyyy')} - {format(range[0].endDate, 'dd/MM/yyyy')}
                      </p>
                    </div>
                  )}
                </div>
              </div>

              {/* Time Slot Selection */}
              {range[0].startDate && range[0].endDate && (
                <div className="flex flex-col mb-4">
                  <label className="font-semibold mb-1.5 text-[#1caf9a]">Ch·ªçn th·ªùi gian kh√°m</label>
                  
                  {/* Home service notice */}
                  {type === 'home' && (
                    <Alert
                      message="L∆∞u √Ω v·ªÅ l·ªãch h·∫πn t·∫°i nh√†"
                      description="D·ªãch v·ª• thu m·∫´u t·∫°i nh√†: Cu·ªëi tu·∫ßn (Th·ª© 7, Ch·ªß nh·∫≠t) c√≥ th·ªÉ ch·ªçn b·∫•t k·ª≥ khung gi·ªù n√†o. C√°c ng√†y trong tu·∫ßn ch·ªâ √°p d·ª•ng ngo√†i gi·ªù h√†nh ch√≠nh (tr∆∞·ªõc 8:00 ho·∫∑c sau 17:00). V√† Ch√∫ √Ω: Ph√≠ d·ªãch v·ª• s·∫Ω tƒÉng th√™m 20% cho c√°c khung gi·ªù ngo√†i gi·ªù h√†nh ch√≠nh."
                      type="info"
                      showIcon
                      className="mb-3"
                    />
                  )}
                  
                  <div className="flex gap-2 flex-wrap">
                    {availableSlots?.length > 0 ? (
                      availableSlots.map((slot) => {
                        const timeSlot = slot.time_slots?.[0];
                        let displayTime = 'Invalid time';
                        let displayDate = '';
                        let staffNames = [];
                        let isDisabled = false;
                        let disabledReason = '';
                        
                        // Declare these variables outside the conditional block so they're accessible in JSX
                        const isPastDate = isSlotPastDate(slot);
                        const isToday = isSlotToday(slot);

                        if (timeSlot?.start_time && timeSlot?.end_time) {
                          const { hour: startHour, minute: startMinute } = timeSlot.start_time;
                          const { hour: endHour, minute: endMinute } = timeSlot.end_time;

                          const paddedStartMinute = startMinute.toString().padStart(2, '0');
                          const paddedEndMinute = endMinute.toString().padStart(2, '0');

                          displayTime = `${startHour}:${paddedStartMinute} - ${endHour}:${paddedEndMinute}`;

                          const date = new Date(timeSlot.year, timeSlot.month - 1, timeSlot.day);
                          displayDate = format(date, 'dd/MM');

                          staffNames = slot.staff_profile_ids.map(staff => 
                            `${staff.user_id.first_name} ${staff.user_id.last_name}`
                          );
                          // Calculate day of week correctly from date components
                          const slotDate = new Date(timeSlot.year, timeSlot.month - 1, timeSlot.day);
                          const dayOfWeek = slotDate.getDay(); // 0=Sunday, 6=Saturday
                          const isWeekend = (dayOfWeek === 0 || dayOfWeek === 6);
                          
                          // Debug logging for render logic
                          console.log(`üé® Render logic for slot ${displayDate} ${displayTime}:`, {
                            slotId: slot._id,
                            isPastDate,
                            type,
                            serviceType,
                            dayOfWeek,
                            isWeekend,
                            startHour: timeSlot.start_time?.hour
                          });
                          
                          if (isPastDate) {
                            isDisabled = true;
                            disabledReason = 'ƒê√£ qu√° th·ªùi gian';
                            console.log(`‚ùå Slot disabled: Past date`);
                          } else if (type === 'home') {
                            // Use the consistent logic from isSlotSelectableForHome
                            const canSelectForHome = isSlotSelectableForHome(slot);
                            console.log(`üè† Home service check result: ${canSelectForHome}`);
                            
                            if (!canSelectForHome) {
                              isDisabled = true;
                              if (isWeekend) {
                                disabledReason = 'Slot kh√¥ng kh·∫£ d·ª•ng cho d·ªãch v·ª• t·∫°i nh√†';
                              } else {
                                disabledReason = 'Ng√†y th∆∞·ªùng ch·ªâ ngo√†i gi·ªù h√†nh ch√≠nh (tr∆∞·ªõc 8:00 ho·∫∑c sau 17:00)';
                              }
                              console.log(`‚ùå Slot disabled for home: ${disabledReason}`);
                            } else {
                              isDisabled = false;
                              disabledReason = '';
                              console.log(`‚úÖ Slot enabled for home service`);
                            }
                          } else {
                            console.log(`‚ÑπÔ∏è Not home service or past date check passed`);
                          }
                        }

                        return (
                          <div key={slot._id} className="relative">
                            <button
                              type="button"
                              disabled={isDisabled}
                              className={`p-3 border border-gray-300 rounded text-sm cursor-pointer text-gray-800 select-none transition-all ${
                                isDisabled
                                  ? 'bg-gray-200 text-gray-400 cursor-not-allowed opacity-60'
                                  : selectedSlot === slot._id
                                  ? 'bg-[#1caf9a] text-white border-[#1caf9a] font-bold'
                                  : 'bg-gray-100 hover:bg-gray-200'
                              }`}
                              onClick={() => !isDisabled && setSelectedSlot(slot._id)}
                              title={isDisabled ? disabledReason : ''}
                            >
                              <div className="text-center">
                                <div className="flex items-center justify-center gap-1">
                                  <span>{displayDate}</span>
                                  {isToday && (
                                    <span className="text-xs bg-green-100 text-green-600 px-1 py-0.5 rounded">
                                      H√¥m nay
                                    </span>
                                  )}
                                </div>
                                <div className="text-xs">{displayTime}</div>
                                {staffNames.length > 0 && (
                                  <div className="text-xs mt-1">
                                    {staffNames.join(', ')}
                                  </div>
                                )}
                                {isDisabled && (
                                  <div className="text-xs mt-1 text-red-500">
                                    {disabledReason}
                                  </div>
                                )}
                              </div>
                            </button>
                          </div>
                        );
                      })
                    ) : (
                      <div className="text-center py-6 text-gray-500">
                        Kh√¥ng c√≥ khung gi·ªù tr·ªëng cho kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn
                      </div>
                    )}
                  </div>
                  
                  {/* Business Hours Warning */}
                  {isOutsideBusinessHours && selectedSlot && (
                    <Alert
                      message="C·∫£nh b√°o ph·ª• ph√≠ ngo√†i gi·ªù"
                      description="Khung gi·ªù b·∫°n ch·ªçn n·∫±m ngo√†i gi·ªù h√†nh ch√≠nh (8:00 - 17:00). Ph√≠ d·ªãch v·ª• s·∫Ω ƒë∆∞·ª£c tƒÉng th√™m 20%."
                      type="warning"
                      showIcon
                      className="mt-3"
                      icon={<FaExclamationTriangle />}
                    />
                  )}
                </div>
              )}
            </>
          )}

          {/* Section 3: Th√¥ng tin kh√°ch h√†ng */}
          <div className="font-bold text-lg border-b-2 border-[#1caf9a] pb-1 mb-5 text-[#1caf9a]">
            Th√¥ng tin kh√°ch h√†ng
          </div>
          
          <div className="flex gap-5 mb-4 flex-wrap">
            <div className="flex-1 min-w-[300px] flex flex-col">
              <label className="font-semibold mb-1.5 text-[#1caf9a]">
                H·ªç v√† t√™n <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                placeholder="H·ªç v√† t√™n"
                required
                value={`${user?.first_name || ''} ${user?.last_name || ''}`}
                disabled
                className="border border-gray-300 rounded px-2.5 py-2 text-sm text-gray-800 outline-[#1caf9a] bg-gray-100"
              />
            </div>

            <div className="flex-1 min-w-[300px] flex flex-col">
              <label className="font-semibold mb-1.5 text-[#1caf9a]">
                Ng√†y th√°ng nƒÉm sinh <span className="text-red-500">*</span>
              </label>
              <input
                placeholder="Ng√†y th√°ng nƒÉm sinh"
                required
                value={user?.dob || ''}
                disabled
                className="border border-gray-300 rounded px-2.5 py-2 text-sm text-gray-800 outline-[#1caf9a] bg-gray-100"
              />
            </div>
          </div>

          <div className="flex gap-5 mb-4 flex-wrap">
            <div className="flex-1 min-w-[300px] flex flex-col">
              <label className="font-semibold mb-1.5 text-[#1caf9a]">
                S·ªë ƒëi·ªán tho·∫°i <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                required
                value={user?.phone_number || ''}
                disabled
                className="border border-gray-300 rounded px-2.5 py-2 text-sm text-gray-800 outline-[#1caf9a] bg-gray-100"
              />
              <div className="text-xs text-gray-600 mt-1">
                *L∆∞u √Ω: H·ªá th·ªëng ch·ªâ g·ª≠i SMS ƒë∆∞·ª£c cho Thu√™ bao n·ªôi ƒë·ªãa, n·∫øu qu√Ω
                kh√°ch s·ª≠ d·ª•ng thu√™ bao qu·ªëc t·∫ø, vui l√≤ng b·ªï sung email ch√≠nh x√°c ƒë·ªÉ
                nh·∫≠n m√£ x√°c nh·∫≠n v√† th√¥ng tin x√°c nh·∫≠n ƒë·∫∑t l·ªãch.
              </div>
            </div>

            <div className="flex-1 min-w-[300px] flex flex-col">
              <label className="font-semibold mb-1.5 text-[#1caf9a]">Email</label>
              <input 
                type="email" 
                placeholder="Nh·∫≠p email" 
                value={user?.email || ''} 
                disabled
                className="border border-gray-300 rounded px-2.5 py-2 text-sm text-gray-800 outline-[#1caf9a] bg-gray-100"
              />
            </div>
          </div>

          {/* Checkbox Agreement */}
          <div className="flex items-start gap-2.5 mt-4 text-xs leading-tight">
            <input type="checkbox" id="agree" required className="mt-0.5" />
            <label htmlFor="agree" className="text-xs leading-tight">
              T√¥i ƒë√£ ƒë·ªçc v√† ƒë·ªìng √Ω v·ªõi{" "}
              <a href="#" className="text-[#1caf9a] no-underline hover:underline" target="_blank" rel="noreferrer">
                Ch√≠nh s√°ch b·∫£o v·ªá d·ªØ li·ªáu c√° nh√¢n c·ªßa Blood
              </a>{" "}
              v√† ch·∫•p thu·∫≠n ƒë·ªÉ Blood x·ª≠ l√Ω d·ªØ li·ªáu c√° nh√¢n c·ªßa t√¥i theo quy ƒë·ªãnh c·ªßa
              ph√°p lu·∫≠t v·ªÅ b·∫£o v·ªá d·ªØ li·ªáu c√° nh√¢n.{" "}
              <span className="text-red-500">*</span>
            </label>
          </div>

          {/* Submit Button */}
          <button 
            className="bg-[#1caf9a] text-white font-semibold border-none px-7 py-2.5 text-sm rounded-full cursor-pointer mx-auto mt-7 block transition-colors hover:bg-[#179e8a] disabled:bg-gray-400 disabled:cursor-not-allowed" 
            type="submit"
          >
            G·ª≠i th√¥ng tin
          </button>
        </form>

        {/* Google Map Modal */}
        {showGoogleMap && (
          <GoogleMapPicker
            onAddressSelect={handleGoogleMapSelect}
            onClose={() => setShowGoogleMap(false)}
            initialAddress={collection_address}
          />
        )}
      </div>
    </div>
  );
};

export default AppointmentModal;
